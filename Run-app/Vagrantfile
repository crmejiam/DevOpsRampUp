# -*- mode: ruby -*-
# vi: set ft=ruby :

# IP for the VM where the Backend is going to be executed
BackendIP = "10.0.0.8"
# IP for the VM where the Frontend is going to be executed
FrontendIP = "10.0.0.10"

Vagrant.configure("2") do |config|

  config.vm.synced_folder "../shared", "/shared"

  # Define backend
  config.vm.define "backend" do |backend|
    backend.vm.box = "ubuntu/trusty64"
    backend.vm.network "forwarded_port", guest: 3000, host: 3000

    # This gives the backend instance a static IP, to ease network communication
    backend.vm.network :private_network, ip: BackendIP

    backend.vm.provision :shell, path: "Provision-backend.sh"

  end

  # Define frontend
  config.vm.define "frontend" do |frontend|
    frontend.vm.box = "ubuntu/trusty64"
    frontend.vm.network "forwarded_port", guest: 3030, host: 3030

    # This gives the backend instance a static IP, to ease network communication
    frontend.vm.network :private_network, ip: FrontendIP

    frontend.vm.provision :shell, path: "Provision-frontend.sh", env: {"BACK_HOST" => BackendIP}

  end

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

end
